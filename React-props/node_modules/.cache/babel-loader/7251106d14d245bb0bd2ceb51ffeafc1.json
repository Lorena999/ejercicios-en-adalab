{"ast":null,"code":"var _jsxFileName = \"/Users/lorena/Dropbox/Mi Mac (MacBook-Pro-de-lorena.local)/Desktop/GitHub/ejercicios-en-adalab/react-pruebas/src/components/Series.js\",\n    _s = $RefreshSig$();\n\n// Fichero src/components/App.js\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Series = () => {\n  _s();\n\n  const favoriteSeries = [{\n    id: \"123\",\n    isFavorite: false,\n    name: \"Juego de tronos\"\n  }, {\n    id: \"456\",\n    isFavorite: false,\n    name: \"Las chicas Gilmore\"\n  }, {\n    id: \"678\",\n    isFavorite: false,\n    name: \"Gambita de Dama\"\n  }]; // Crearmos las series en el estado indicando el array inicial\n\n  const [series, setSeries] = useState(favoriteSeries);\n  const [searchName, setSearchName] = useState(\"\");\n  const [searchIsFavorite, setSearchIsFavorite] = useState(false); // Función manejadora que se ejecuta cuando la usuaria pulsa en una serie\n\n  const handleFavorite = ev => {\n    // Obtenemos el id de la serie pintada. Este id lo estamos renderizando dentro del map\n    // Por cierto aquí solo puedo usar currentTarget y no target porque quiero leer el id de li escuchado\n    const clickedSerieId = ev.currentTarget.id; // Buscamos la serie pulsada\n\n    const foundSerie = series.find(serie => serie.id === clickedSerieId); // Invertimos la propiedad de serie pintada, si antes era false ahora es true y viceversa\n\n    foundSerie.isFavorite = !foundSerie.isFavorite; // Guardamos las series en el estado usando spread (lo explicamos más abajo)\n\n    setSeries([...series]);\n  };\n\n  const handleSearchName = ev => {\n    setSearchName(ev.target.value);\n  };\n\n  const handleSearchIsFavorite = ev => {\n    setSearchIsFavorite(ev.target.checked);\n  }; //funciones de renderizado\n\n\n  const renderSeries = () => {\n    return series.filter(serie => {\n      return serie.name.toLowerCase().includes(searchName.toLowerCase());\n    }).filter(serie => {\n      if (searchIsFavorite === true) {\n        return serie.isFavorite === true;\n      } else {\n        return true;\n      }\n    }) //mapeamos\n    .map(serie => {\n      return (\n        /*#__PURE__*/\n        // Renderizamos cada serie añdiendo el atributo id\n        _jsxDEV(\"li\", {\n          id: serie.id,\n          onClick: handleFavorite,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: serie.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Es mi serie favorita: \", serie.isFavorite ? \"Sí\" : \"No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, serie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      );\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de series favoritas:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderSeries()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"searchName\",\n        children: \"Buscar por nombre de serie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"searchName\",\n        value: searchName,\n        onChange: handleSearchName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"searchIsFavorite\",\n        children: \"Mostrar solo las favoritas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"searchIsFavorite\",\n        checked: searchIsFavorite,\n        onChange: handleSearchIsFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Series, \"pnz8vFJ3zcwa93WLauQs7fa4euw=\");\n\n_c = Series;\nexport default Series;\n\nvar _c;\n\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"sources":["/Users/lorena/Dropbox/Mi Mac (MacBook-Pro-de-lorena.local)/Desktop/GitHub/ejercicios-en-adalab/react-pruebas/src/components/Series.js"],"names":["useState","Series","favoriteSeries","id","isFavorite","name","series","setSeries","searchName","setSearchName","searchIsFavorite","setSearchIsFavorite","handleFavorite","ev","clickedSerieId","currentTarget","foundSerie","find","serie","handleSearchName","target","value","handleSearchIsFavorite","checked","renderSeries","filter","toLowerCase","includes","map"],"mappings":"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","sourcesContent":["// Fichero src/components/App.js\nimport { useState } from \"react\";\n\nconst Series = () => {\n  const favoriteSeries = [\n    { id: \"123\", isFavorite: false, name: \"Juego de tronos\" },\n    { id: \"456\", isFavorite: false, name: \"Las chicas Gilmore\" },\n    { id: \"678\", isFavorite: false, name: \"Gambita de Dama\" },\n  ];\n  // Crearmos las series en el estado indicando el array inicial\n  const [series, setSeries] = useState(favoriteSeries);\n  const [searchName, setSearchName] = useState(\"\");\n  const [searchIsFavorite, setSearchIsFavorite] = useState(false);\n\n  // Función manejadora que se ejecuta cuando la usuaria pulsa en una serie\n  const handleFavorite = (ev) => {\n    // Obtenemos el id de la serie pintada. Este id lo estamos renderizando dentro del map\n    // Por cierto aquí solo puedo usar currentTarget y no target porque quiero leer el id de li escuchado\n    const clickedSerieId = ev.currentTarget.id;\n    // Buscamos la serie pulsada\n    const foundSerie = series.find((serie) => serie.id === clickedSerieId);\n    // Invertimos la propiedad de serie pintada, si antes era false ahora es true y viceversa\n    foundSerie.isFavorite = !foundSerie.isFavorite;\n    // Guardamos las series en el estado usando spread (lo explicamos más abajo)\n    setSeries([...series]);\n  };\n\n  const handleSearchName = (ev) => {\n    setSearchName(ev.target.value);\n  };\n  const handleSearchIsFavorite = (ev) => {\n    setSearchIsFavorite(ev.target.checked);\n  };\n\n  //funciones de renderizado\n  const renderSeries = () => {\n    return (\n      series\n        .filter((serie) => {\n          return serie.name.toLowerCase().includes(searchName.toLowerCase());\n        })\n        .filter((serie) => {\n          if (searchIsFavorite === true) {\n            return serie.isFavorite === true;\n          } else {\n            return true;\n          }\n        })\n        //mapeamos\n        .map((serie) => {\n          return (\n            // Renderizamos cada serie añdiendo el atributo id\n            <li key={serie.id} id={serie.id} onClick={handleFavorite}>\n              <h2>{serie.name}</h2>\n              {/* Pintamos si cada serie es favorita usando el atributo isFavorite */}\n              <p>Es mi serie favorita: {serie.isFavorite ? \"Sí\" : \"No\"}</p>\n            </li>\n          );\n        })\n    );\n  };\n\n  return (\n    <div>\n      <h1>Lista de series favoritas:</h1>\n      <ul>{renderSeries()}</ul>\n      <form>\n        <label htmlFor=\"searchName\">Buscar por nombre de serie</label>\n        <input\n          type=\"text\"\n          id=\"searchName\"\n          value={searchName}\n          onChange={handleSearchName}\n        />\n        <br />\n        <label htmlFor=\"searchIsFavorite\">Mostrar solo las favoritas</label>\n        <input\n          type=\"checkbox\"\n          id=\"searchIsFavorite\"\n          checked={searchIsFavorite}\n          onChange={handleSearchIsFavorite}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Series;\n"]},"metadata":{},"sourceType":"module"}